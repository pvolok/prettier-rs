// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comment.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for (x
/*a*/
in //b
y) //c
;

for (x in /*a*/ //b
y); //c

for (x /*a*/ in y); //b //c

for (x
//a
in y);

for(x in
//a
y);

for (x
/*a*/
of //b
y) //c
;

for (x of /*a*/ //b
y); //c

for (x /*a*/ of y); //b //c

for (x
//a
of y);

for(x of
//a
y);

=====================================output=====================================
/*a*/
for (x in y); //b //c

for (x /*a*/ in y); //b //c

for (x /*a*/ in y); //b //c

//a
for (x in y);

//a
for (x in y);

/*a*/
for (x of y); //b //c

for (x /*a*/ of y); //b //c

for (x /*a*/ of y); //b //c

//a
for (x of y);

//a
for (x of y);

================================================================================
`;

exports[`continue-and-break-comment-1.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for(;;) {
    continue // comment
    ;
}

for (;;) {
    break // comment
    ;
}

for (const f of []) {
    continue // comment
    ;
}

for (const f of []) {
    break // comment
    ;
}

for (const f in {}) {
    continue // comment
    ;
}

for (const f in {}) {
    break // comment
    ;
}

while(true) {
    continue // comment
    ;
}

while (true) {
    break // comment
    ;
}

do {
    continue // comment
    ;
} while(true);


do {
    break // comment
    ;
} while(true);

label1: for (;;) {
    continue label1 // comment
    ;
}

label2: {
    break label2 // comment
    ;
};

for(;;) {
    continue /* comment */
    ;
}

for (;;) {
    break /* comment */
    ;
}

for (const f of []) {
    continue /* comment */
    ;
}

for (const f of []) {
    break /* comment */
    ;
}

for (const f in {}) {
    continue /* comment */
    ;
}

for (const f in {}) {
    break /* comment */
    ;
}

while(true) {
    continue /* comment */
    ;
}

while (true) {
    break /* comment */
    ;
}

do {
    continue /* comment */
    ;
} while(true);


do {
    break /* comment */
    ;
} while(true);

label1: for (;;) {
    continue label1 /* comment */
    ;
}

label2: {
    break label2 /* comment */
    ;
};

=====================================output=====================================
for (;;) {
  continue; // comment
}

for (;;) {
  break; // comment
}

for (const f of []) {
  continue; // comment
}

for (const f of []) {
  break; // comment
}

for (const f in {}) {
  continue; // comment
}

for (const f in {}) {
  break; // comment
}

while (true) {
  continue; // comment
}

while (true) {
  break; // comment
}

do {
  continue; // comment
} while (true);

do {
  break; // comment
} while (true);

label1: for (;;) {
  continue label1; // comment
}

label2: {
  break label2; // comment
}

for (;;) {
  continue; /* comment */
}

for (;;) {
  break; /* comment */
}

for (const f of []) {
  continue; /* comment */
}

for (const f of []) {
  break; /* comment */
}

for (const f in {}) {
  continue; /* comment */
}

for (const f in {}) {
  break; /* comment */
}

while (true) {
  continue; /* comment */
}

while (true) {
  break; /* comment */
}

do {
  continue; /* comment */
} while (true);

do {
  break; /* comment */
} while (true);

label1: for (;;) {
  continue label1 /* comment */;
}

label2: {
  break label2 /* comment */;
}

================================================================================
`;

exports[`continue-and-break-comment-2.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for(;;) {
    continue
    // comment
    ;
}

for (;;) {
    break
    // comment
    ;
}

for (const f of []) {
    continue
    // comment
    ;
}

for (const f of []) {
    break
    // comment
    ;
}

for (const f in {}) {
    continue
    // comment
    ;
}

for (const f in {}) {
    break
    // comment
    ;
}

while(true) {
    continue
    // comment
    ;
}

while (true) {
    break
    // comment
    ;
}

do {
    continue
    // comment
    ;
} while(true);


do {
    break
    // comment
    ;
} while(true);

label1: for (;;) {
    continue label1
    // comment
    ;
}

label2: {
    break label2
    // comment
    ;
};

for(;;) {
    continue
    /* comment */
    ;
}

for (;;) {
    break
    /* comment */
    ;
}

for (const f of []) {
    continue
    /* comment */
    ;
}

for (const f of []) {
    break
    /* comment */
    ;
}

for (const f in {}) {
    continue
    /* comment */
    ;
}

for (const f in {}) {
    break
    /* comment */
    ;
}

while(true) {
    continue
    /* comment */
    ;
}

while (true) {
    break
    /* comment */
    ;
}

do {
    continue
    /* comment */
    ;
} while(true);


do {
    break
    /* comment */
    ;
} while(true);

label1: for (;;) {
    continue label1
    /* comment */
    ;
}

label2: {
    break label2
    /* comment */
    ;
};

=====================================output=====================================
for (;;) {
  continue;
  // comment
}

for (;;) {
  break;
  // comment
}

for (const f of []) {
  continue;
  // comment
}

for (const f of []) {
  break;
  // comment
}

for (const f in {}) {
  continue;
  // comment
}

for (const f in {}) {
  break;
  // comment
}

while (true) {
  continue;
  // comment
}

while (true) {
  break;
  // comment
}

do {
  continue;
  // comment
} while (true);

do {
  break;
  // comment
} while (true);

label1: for (;;) {
  continue label1;
  // comment
}

label2: {
  break label2;
  // comment
}

for (;;) {
  continue;
  /* comment */
}

for (;;) {
  break;
  /* comment */
}

for (const f of []) {
  continue;
  /* comment */
}

for (const f of []) {
  break;
  /* comment */
}

for (const f in {}) {
  continue;
  /* comment */
}

for (const f in {}) {
  break;
  /* comment */
}

while (true) {
  continue;
  /* comment */
}

while (true) {
  break;
  /* comment */
}

do {
  continue;
  /* comment */
} while (true);

do {
  break;
  /* comment */
} while (true);

label1: for (;;) {
  continue label1;
  /* comment */
}

label2: {
  break label2;
  /* comment */
}

================================================================================
`;

exports[`continue-and-break-comment-without-blocks.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for(;;) continue
// comment
;

for (;;) break
// comment
;

for (const f of []) continue
// comment
;

for (const f of []) break
// comment
;

for (const f in {}) continue
// comment
;

for (const f in {}) break
// comment
;

for(;;) continue // comment
;

for (;;) break // comment
;

for (const f of []) continue // comment
;

for (const f of []) break // comment
;

for (const f in {}) continue // comment
;

for (const f in {}) break // comment
;

for(;;) continue /* comment */
;

for (;;) break /* comment */
;

for (const f of []) continue /* comment */
;

for (const f of []) break /* comment */
;

for (const f in {}) continue /* comment */
;

for (const f in {}) break /* comment */
;

for(;;) continue
/* comment */
;

for (;;) break
/* comment */
;

for (const f of []) continue
/* comment */
;

for (const f of []) break
/* comment */
;

for (const f in {}) continue
/* comment */
;

for (const f in {}) break
/* comment */
;

label1: for (;;) continue label1 /* comment */
;

label1: for (;;) continue label1
/* comment */
;

label1: for (;;) continue label1 // comment
;

label1: for (;;) continue label1
// comment
;

=====================================output=====================================
for (;;)
  continue;
  // comment

for (;;)
  break;
  // comment

for (const f of [])
  continue;
  // comment

for (const f of [])
  break;
  // comment

for (const f in {})
  continue;
  // comment

for (const f in {})
  break;
  // comment

for (;;)
  continue; // comment

for (;;)
  break; // comment

for (const f of [])
  continue; // comment

for (const f of [])
  break; // comment

for (const f in {})
  continue; // comment

for (const f in {})
  break; // comment

for (;;) continue; /* comment */

for (;;) break; /* comment */

for (const f of []) continue; /* comment */

for (const f of []) break; /* comment */

for (const f in {}) continue; /* comment */

for (const f in {}) break; /* comment */

for (;;)
  continue;
  /* comment */

for (;;)
  break;
  /* comment */

for (const f of [])
  continue;
  /* comment */

for (const f of [])
  break;
  /* comment */

for (const f in {})
  continue;
  /* comment */

for (const f in {})
  break;
  /* comment */

label1: for (;;) continue label1 /* comment */;

label1: for (;;)
  continue label1;
  /* comment */

label1: for (;;)
  continue label1; // comment

label1: for (;;)
  continue label1;
  // comment

================================================================================
`;

exports[`for.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for (;;) {}
for (var i = 0; i < 10; ++i) {}

for (;;) 0;
for (var i = 0; i < 10; ++i) 0;

=====================================output=====================================
for (;;) {}
for (var i = 0; i < 10; ++i) {}

for (;;) 0;
for (var i = 0; i < 10; ++i) 0;

================================================================================
`;

exports[`in.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for ((x in a);;) {}
for (a=(a in b);;) {}
for (let a = (b in c); ; );
for (a && (b in c); ; );
for (a => (b in c); ; );
function* g() {
  for (yield (a in b); ; );
}
async function f() {
  for (await (a in b); ; );
}
for (a in b) 0;

=====================================output=====================================
for ((x in a); ; ) {}
for (a = (a in b); ; ) {}
for (let a = (b in c); ; );
for (a && (b in c); ; );
for ((a) => (b in c); ; );
function* g() {
  for (yield (a in b); ; );
}
async function f() {
  for (await (a in b); ; );
}
for (a in b) 0;

================================================================================
`;

exports[`var.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for (a in b) var c = {}; [];

=====================================output=====================================
for (a in b) var c = {};
[];

================================================================================
`;
